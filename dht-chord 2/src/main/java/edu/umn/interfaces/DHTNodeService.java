/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.umn.interfaces;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-04-05")
public class DHTNodeService {

  public interface Iface {

    public String getBook(String bookTitle, long debugFlag) throws org.apache.thrift.TException;

    public void setBook(String bookTitle, String genre, long debugFlag) throws org.apache.thrift.TException;

    public void updateFingerTable(DHTNode newNode, int i, List<DHTNode> visitedNodes) throws org.apache.thrift.TException;

    public DHTNodePath findSuccessor(long key, List<DHTNode> visitedNodes) throws org.apache.thrift.TException;

    public DHTNodePath findPredecessor(long key, List<DHTNode> visitedNodes) throws org.apache.thrift.TException;

    public void setPredecessor(DHTNode predecessor) throws org.apache.thrift.TException;

    public Map<String,String> transferKeys(long key) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getBook(String bookTitle, long debugFlag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setBook(String bookTitle, String genre, long debugFlag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFingerTable(DHTNode newNode, int i, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findSuccessor(long key, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPredecessor(long key, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setPredecessor(DHTNode predecessor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void transferKeys(long key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getBook(String bookTitle, long debugFlag) throws org.apache.thrift.TException
    {
      send_getBook(bookTitle, debugFlag);
      return recv_getBook();
    }

    public void send_getBook(String bookTitle, long debugFlag) throws org.apache.thrift.TException
    {
      getBook_args args = new getBook_args();
      args.setBookTitle(bookTitle);
      args.setDebugFlag(debugFlag);
      sendBase("getBook", args);
    }

    public String recv_getBook() throws org.apache.thrift.TException
    {
      getBook_result result = new getBook_result();
      receiveBase(result, "getBook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBook failed: unknown result");
    }

    public void setBook(String bookTitle, String genre, long debugFlag) throws org.apache.thrift.TException
    {
      send_setBook(bookTitle, genre, debugFlag);
      recv_setBook();
    }

    public void send_setBook(String bookTitle, String genre, long debugFlag) throws org.apache.thrift.TException
    {
      setBook_args args = new setBook_args();
      args.setBookTitle(bookTitle);
      args.setGenre(genre);
      args.setDebugFlag(debugFlag);
      sendBase("setBook", args);
    }

    public void recv_setBook() throws org.apache.thrift.TException
    {
      setBook_result result = new setBook_result();
      receiveBase(result, "setBook");
      return;
    }

    public void updateFingerTable(DHTNode newNode, int i, List<DHTNode> visitedNodes) throws org.apache.thrift.TException
    {
      send_updateFingerTable(newNode, i, visitedNodes);
      recv_updateFingerTable();
    }

    public void send_updateFingerTable(DHTNode newNode, int i, List<DHTNode> visitedNodes) throws org.apache.thrift.TException
    {
      updateFingerTable_args args = new updateFingerTable_args();
      args.setNewNode(newNode);
      args.setI(i);
      args.setVisitedNodes(visitedNodes);
      sendBase("updateFingerTable", args);
    }

    public void recv_updateFingerTable() throws org.apache.thrift.TException
    {
      updateFingerTable_result result = new updateFingerTable_result();
      receiveBase(result, "updateFingerTable");
      return;
    }

    public DHTNodePath findSuccessor(long key, List<DHTNode> visitedNodes) throws org.apache.thrift.TException
    {
      send_findSuccessor(key, visitedNodes);
      return recv_findSuccessor();
    }

    public void send_findSuccessor(long key, List<DHTNode> visitedNodes) throws org.apache.thrift.TException
    {
      findSuccessor_args args = new findSuccessor_args();
      args.setKey(key);
      args.setVisitedNodes(visitedNodes);
      sendBase("findSuccessor", args);
    }

    public DHTNodePath recv_findSuccessor() throws org.apache.thrift.TException
    {
      findSuccessor_result result = new findSuccessor_result();
      receiveBase(result, "findSuccessor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSuccessor failed: unknown result");
    }

    public DHTNodePath findPredecessor(long key, List<DHTNode> visitedNodes) throws org.apache.thrift.TException
    {
      send_findPredecessor(key, visitedNodes);
      return recv_findPredecessor();
    }

    public void send_findPredecessor(long key, List<DHTNode> visitedNodes) throws org.apache.thrift.TException
    {
      findPredecessor_args args = new findPredecessor_args();
      args.setKey(key);
      args.setVisitedNodes(visitedNodes);
      sendBase("findPredecessor", args);
    }

    public DHTNodePath recv_findPredecessor() throws org.apache.thrift.TException
    {
      findPredecessor_result result = new findPredecessor_result();
      receiveBase(result, "findPredecessor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPredecessor failed: unknown result");
    }

    public void setPredecessor(DHTNode predecessor) throws org.apache.thrift.TException
    {
      send_setPredecessor(predecessor);
      recv_setPredecessor();
    }

    public void send_setPredecessor(DHTNode predecessor) throws org.apache.thrift.TException
    {
      setPredecessor_args args = new setPredecessor_args();
      args.setPredecessor(predecessor);
      sendBase("setPredecessor", args);
    }

    public void recv_setPredecessor() throws org.apache.thrift.TException
    {
      setPredecessor_result result = new setPredecessor_result();
      receiveBase(result, "setPredecessor");
      return;
    }

    public Map<String,String> transferKeys(long key) throws org.apache.thrift.TException
    {
      send_transferKeys(key);
      return recv_transferKeys();
    }

    public void send_transferKeys(long key) throws org.apache.thrift.TException
    {
      transferKeys_args args = new transferKeys_args();
      args.setKey(key);
      sendBase("transferKeys", args);
    }

    public Map<String,String> recv_transferKeys() throws org.apache.thrift.TException
    {
      transferKeys_result result = new transferKeys_result();
      receiveBase(result, "transferKeys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transferKeys failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBook(String bookTitle, long debugFlag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBook_call method_call = new getBook_call(bookTitle, debugFlag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bookTitle;
      private long debugFlag;
      public getBook_call(String bookTitle, long debugFlag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookTitle = bookTitle;
        this.debugFlag = debugFlag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBook_args args = new getBook_args();
        args.setBookTitle(bookTitle);
        args.setDebugFlag(debugFlag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBook();
      }
    }

    public void setBook(String bookTitle, String genre, long debugFlag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setBook_call method_call = new setBook_call(bookTitle, genre, debugFlag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setBook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bookTitle;
      private String genre;
      private long debugFlag;
      public setBook_call(String bookTitle, String genre, long debugFlag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookTitle = bookTitle;
        this.genre = genre;
        this.debugFlag = debugFlag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setBook_args args = new setBook_args();
        args.setBookTitle(bookTitle);
        args.setGenre(genre);
        args.setDebugFlag(debugFlag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setBook();
      }
    }

    public void updateFingerTable(DHTNode newNode, int i, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFingerTable_call method_call = new updateFingerTable_call(newNode, i, visitedNodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFingerTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DHTNode newNode;
      private int i;
      private List<DHTNode> visitedNodes;
      public updateFingerTable_call(DHTNode newNode, int i, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newNode = newNode;
        this.i = i;
        this.visitedNodes = visitedNodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFingerTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFingerTable_args args = new updateFingerTable_args();
        args.setNewNode(newNode);
        args.setI(i);
        args.setVisitedNodes(visitedNodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateFingerTable();
      }
    }

    public void findSuccessor(long key, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSuccessor_call method_call = new findSuccessor_call(key, visitedNodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSuccessor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long key;
      private List<DHTNode> visitedNodes;
      public findSuccessor_call(long key, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.visitedNodes = visitedNodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSuccessor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSuccessor_args args = new findSuccessor_args();
        args.setKey(key);
        args.setVisitedNodes(visitedNodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DHTNodePath getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSuccessor();
      }
    }

    public void findPredecessor(long key, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPredecessor_call method_call = new findPredecessor_call(key, visitedNodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPredecessor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long key;
      private List<DHTNode> visitedNodes;
      public findPredecessor_call(long key, List<DHTNode> visitedNodes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.visitedNodes = visitedNodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPredecessor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPredecessor_args args = new findPredecessor_args();
        args.setKey(key);
        args.setVisitedNodes(visitedNodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DHTNodePath getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPredecessor();
      }
    }

    public void setPredecessor(DHTNode predecessor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPredecessor_call method_call = new setPredecessor_call(predecessor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPredecessor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DHTNode predecessor;
      public setPredecessor_call(DHTNode predecessor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.predecessor = predecessor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPredecessor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPredecessor_args args = new setPredecessor_args();
        args.setPredecessor(predecessor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setPredecessor();
      }
    }

    public void transferKeys(long key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transferKeys_call method_call = new transferKeys_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transferKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long key;
      public transferKeys_call(long key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transferKeys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transferKeys_args args = new transferKeys_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transferKeys();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getBook", new getBook());
      processMap.put("setBook", new setBook());
      processMap.put("updateFingerTable", new updateFingerTable());
      processMap.put("findSuccessor", new findSuccessor());
      processMap.put("findPredecessor", new findPredecessor());
      processMap.put("setPredecessor", new setPredecessor());
      processMap.put("transferKeys", new transferKeys());
      return processMap;
    }

    public static class getBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBook_args> {
      public getBook() {
        super("getBook");
      }

      public getBook_args getEmptyArgsInstance() {
        return new getBook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBook_result getResult(I iface, getBook_args args) throws org.apache.thrift.TException {
        getBook_result result = new getBook_result();
        result.success = iface.getBook(args.bookTitle, args.debugFlag);
        return result;
      }
    }

    public static class setBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setBook_args> {
      public setBook() {
        super("setBook");
      }

      public setBook_args getEmptyArgsInstance() {
        return new setBook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setBook_result getResult(I iface, setBook_args args) throws org.apache.thrift.TException {
        setBook_result result = new setBook_result();
        iface.setBook(args.bookTitle, args.genre, args.debugFlag);
        return result;
      }
    }

    public static class updateFingerTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFingerTable_args> {
      public updateFingerTable() {
        super("updateFingerTable");
      }

      public updateFingerTable_args getEmptyArgsInstance() {
        return new updateFingerTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFingerTable_result getResult(I iface, updateFingerTable_args args) throws org.apache.thrift.TException {
        updateFingerTable_result result = new updateFingerTable_result();
        iface.updateFingerTable(args.newNode, args.i, args.visitedNodes);
        return result;
      }
    }

    public static class findSuccessor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSuccessor_args> {
      public findSuccessor() {
        super("findSuccessor");
      }

      public findSuccessor_args getEmptyArgsInstance() {
        return new findSuccessor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findSuccessor_result getResult(I iface, findSuccessor_args args) throws org.apache.thrift.TException {
        findSuccessor_result result = new findSuccessor_result();
        result.success = iface.findSuccessor(args.key, args.visitedNodes);
        return result;
      }
    }

    public static class findPredecessor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPredecessor_args> {
      public findPredecessor() {
        super("findPredecessor");
      }

      public findPredecessor_args getEmptyArgsInstance() {
        return new findPredecessor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPredecessor_result getResult(I iface, findPredecessor_args args) throws org.apache.thrift.TException {
        findPredecessor_result result = new findPredecessor_result();
        result.success = iface.findPredecessor(args.key, args.visitedNodes);
        return result;
      }
    }

    public static class setPredecessor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPredecessor_args> {
      public setPredecessor() {
        super("setPredecessor");
      }

      public setPredecessor_args getEmptyArgsInstance() {
        return new setPredecessor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPredecessor_result getResult(I iface, setPredecessor_args args) throws org.apache.thrift.TException {
        setPredecessor_result result = new setPredecessor_result();
        iface.setPredecessor(args.predecessor);
        return result;
      }
    }

    public static class transferKeys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transferKeys_args> {
      public transferKeys() {
        super("transferKeys");
      }

      public transferKeys_args getEmptyArgsInstance() {
        return new transferKeys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transferKeys_result getResult(I iface, transferKeys_args args) throws org.apache.thrift.TException {
        transferKeys_result result = new transferKeys_result();
        result.success = iface.transferKeys(args.key);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getBook", new getBook());
      processMap.put("setBook", new setBook());
      processMap.put("updateFingerTable", new updateFingerTable());
      processMap.put("findSuccessor", new findSuccessor());
      processMap.put("findPredecessor", new findPredecessor());
      processMap.put("setPredecessor", new setPredecessor());
      processMap.put("transferKeys", new transferKeys());
      return processMap;
    }

    public static class getBook<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBook_args, String> {
      public getBook() {
        super("getBook");
      }

      public getBook_args getEmptyArgsInstance() {
        return new getBook_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getBook_result result = new getBook_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBook_result result = new getBook_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBook_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getBook(args.bookTitle, args.debugFlag,resultHandler);
      }
    }

    public static class setBook<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setBook_args, Void> {
      public setBook() {
        super("setBook");
      }

      public setBook_args getEmptyArgsInstance() {
        return new setBook_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setBook_result result = new setBook_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setBook_result result = new setBook_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setBook_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setBook(args.bookTitle, args.genre, args.debugFlag,resultHandler);
      }
    }

    public static class updateFingerTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFingerTable_args, Void> {
      public updateFingerTable() {
        super("updateFingerTable");
      }

      public updateFingerTable_args getEmptyArgsInstance() {
        return new updateFingerTable_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateFingerTable_result result = new updateFingerTable_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFingerTable_result result = new updateFingerTable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFingerTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateFingerTable(args.newNode, args.i, args.visitedNodes,resultHandler);
      }
    }

    public static class findSuccessor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSuccessor_args, DHTNodePath> {
      public findSuccessor() {
        super("findSuccessor");
      }

      public findSuccessor_args getEmptyArgsInstance() {
        return new findSuccessor_args();
      }

      public AsyncMethodCallback<DHTNodePath> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DHTNodePath>() { 
          public void onComplete(DHTNodePath o) {
            findSuccessor_result result = new findSuccessor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findSuccessor_result result = new findSuccessor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSuccessor_args args, org.apache.thrift.async.AsyncMethodCallback<DHTNodePath> resultHandler) throws TException {
        iface.findSuccessor(args.key, args.visitedNodes,resultHandler);
      }
    }

    public static class findPredecessor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPredecessor_args, DHTNodePath> {
      public findPredecessor() {
        super("findPredecessor");
      }

      public findPredecessor_args getEmptyArgsInstance() {
        return new findPredecessor_args();
      }

      public AsyncMethodCallback<DHTNodePath> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DHTNodePath>() { 
          public void onComplete(DHTNodePath o) {
            findPredecessor_result result = new findPredecessor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPredecessor_result result = new findPredecessor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPredecessor_args args, org.apache.thrift.async.AsyncMethodCallback<DHTNodePath> resultHandler) throws TException {
        iface.findPredecessor(args.key, args.visitedNodes,resultHandler);
      }
    }

    public static class setPredecessor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPredecessor_args, Void> {
      public setPredecessor() {
        super("setPredecessor");
      }

      public setPredecessor_args getEmptyArgsInstance() {
        return new setPredecessor_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setPredecessor_result result = new setPredecessor_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPredecessor_result result = new setPredecessor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPredecessor_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setPredecessor(args.predecessor,resultHandler);
      }
    }

    public static class transferKeys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transferKeys_args, Map<String,String>> {
      public transferKeys() {
        super("transferKeys");
      }

      public transferKeys_args getEmptyArgsInstance() {
        return new transferKeys_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            transferKeys_result result = new transferKeys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transferKeys_result result = new transferKeys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transferKeys_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.transferKeys(args.key,resultHandler);
      }
    }

  }

  public static class getBook_args implements org.apache.thrift.TBase<getBook_args, getBook_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBook_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBook_args");

    private static final org.apache.thrift.protocol.TField BOOK_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("bookTitle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEBUG_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("debugFlag", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBook_argsTupleSchemeFactory());
    }

    public String bookTitle; // required
    public long debugFlag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_TITLE((short)1, "bookTitle"),
      DEBUG_FLAG((short)2, "debugFlag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_TITLE
            return BOOK_TITLE;
          case 2: // DEBUG_FLAG
            return DEBUG_FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEBUGFLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_TITLE, new org.apache.thrift.meta_data.FieldMetaData("bookTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEBUG_FLAG, new org.apache.thrift.meta_data.FieldMetaData("debugFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBook_args.class, metaDataMap);
    }

    public getBook_args() {
    }

    public getBook_args(
      String bookTitle,
      long debugFlag)
    {
      this();
      this.bookTitle = bookTitle;
      this.debugFlag = debugFlag;
      setDebugFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBook_args(getBook_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBookTitle()) {
        this.bookTitle = other.bookTitle;
      }
      this.debugFlag = other.debugFlag;
    }

    public getBook_args deepCopy() {
      return new getBook_args(this);
    }

    @Override
    public void clear() {
      this.bookTitle = null;
      setDebugFlagIsSet(false);
      this.debugFlag = 0;
    }

    public String getBookTitle() {
      return this.bookTitle;
    }

    public getBook_args setBookTitle(String bookTitle) {
      this.bookTitle = bookTitle;
      return this;
    }

    public void unsetBookTitle() {
      this.bookTitle = null;
    }

    /** Returns true if field bookTitle is set (has been assigned a value) and false otherwise */
    public boolean isSetBookTitle() {
      return this.bookTitle != null;
    }

    public void setBookTitleIsSet(boolean value) {
      if (!value) {
        this.bookTitle = null;
      }
    }

    public long getDebugFlag() {
      return this.debugFlag;
    }

    public getBook_args setDebugFlag(long debugFlag) {
      this.debugFlag = debugFlag;
      setDebugFlagIsSet(true);
      return this;
    }

    public void unsetDebugFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBUGFLAG_ISSET_ID);
    }

    /** Returns true if field debugFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetDebugFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __DEBUGFLAG_ISSET_ID);
    }

    public void setDebugFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBUGFLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOK_TITLE:
        if (value == null) {
          unsetBookTitle();
        } else {
          setBookTitle((String)value);
        }
        break;

      case DEBUG_FLAG:
        if (value == null) {
          unsetDebugFlag();
        } else {
          setDebugFlag((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_TITLE:
        return getBookTitle();

      case DEBUG_FLAG:
        return getDebugFlag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOK_TITLE:
        return isSetBookTitle();
      case DEBUG_FLAG:
        return isSetDebugFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBook_args)
        return this.equals((getBook_args)that);
      return false;
    }

    public boolean equals(getBook_args that) {
      if (that == null)
        return false;

      boolean this_present_bookTitle = true && this.isSetBookTitle();
      boolean that_present_bookTitle = true && that.isSetBookTitle();
      if (this_present_bookTitle || that_present_bookTitle) {
        if (!(this_present_bookTitle && that_present_bookTitle))
          return false;
        if (!this.bookTitle.equals(that.bookTitle))
          return false;
      }

      boolean this_present_debugFlag = true;
      boolean that_present_debugFlag = true;
      if (this_present_debugFlag || that_present_debugFlag) {
        if (!(this_present_debugFlag && that_present_debugFlag))
          return false;
        if (this.debugFlag != that.debugFlag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bookTitle = true && (isSetBookTitle());
      list.add(present_bookTitle);
      if (present_bookTitle)
        list.add(bookTitle);

      boolean present_debugFlag = true;
      list.add(present_debugFlag);
      if (present_debugFlag)
        list.add(debugFlag);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookTitle()).compareTo(other.isSetBookTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookTitle, other.bookTitle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDebugFlag()).compareTo(other.isSetDebugFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDebugFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugFlag, other.debugFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBook_args(");
      boolean first = true;

      sb.append("bookTitle:");
      if (this.bookTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.bookTitle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("debugFlag:");
      sb.append(this.debugFlag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBook_argsStandardSchemeFactory implements SchemeFactory {
      public getBook_argsStandardScheme getScheme() {
        return new getBook_argsStandardScheme();
      }
    }

    private static class getBook_argsStandardScheme extends StandardScheme<getBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookTitle = iprot.readString();
                struct.setBookTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEBUG_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.debugFlag = iprot.readI64();
                struct.setDebugFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookTitle != null) {
          oprot.writeFieldBegin(BOOK_TITLE_FIELD_DESC);
          oprot.writeString(struct.bookTitle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEBUG_FLAG_FIELD_DESC);
        oprot.writeI64(struct.debugFlag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBook_argsTupleSchemeFactory implements SchemeFactory {
      public getBook_argsTupleScheme getScheme() {
        return new getBook_argsTupleScheme();
      }
    }

    private static class getBook_argsTupleScheme extends TupleScheme<getBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookTitle()) {
          optionals.set(0);
        }
        if (struct.isSetDebugFlag()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBookTitle()) {
          oprot.writeString(struct.bookTitle);
        }
        if (struct.isSetDebugFlag()) {
          oprot.writeI64(struct.debugFlag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bookTitle = iprot.readString();
          struct.setBookTitleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.debugFlag = iprot.readI64();
          struct.setDebugFlagIsSet(true);
        }
      }
    }

  }

  public static class getBook_result implements org.apache.thrift.TBase<getBook_result, getBook_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBook_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBook_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBook_result.class, metaDataMap);
    }

    public getBook_result() {
    }

    public getBook_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBook_result(getBook_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getBook_result deepCopy() {
      return new getBook_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBook_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBook_result)
        return this.equals((getBook_result)that);
      return false;
    }

    public boolean equals(getBook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBook_resultStandardSchemeFactory implements SchemeFactory {
      public getBook_resultStandardScheme getScheme() {
        return new getBook_resultStandardScheme();
      }
    }

    private static class getBook_resultStandardScheme extends StandardScheme<getBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBook_resultTupleSchemeFactory implements SchemeFactory {
      public getBook_resultTupleScheme getScheme() {
        return new getBook_resultTupleScheme();
      }
    }

    private static class getBook_resultTupleScheme extends TupleScheme<getBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setBook_args implements org.apache.thrift.TBase<setBook_args, setBook_args._Fields>, java.io.Serializable, Cloneable, Comparable<setBook_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBook_args");

    private static final org.apache.thrift.protocol.TField BOOK_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("bookTitle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GENRE_FIELD_DESC = new org.apache.thrift.protocol.TField("genre", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DEBUG_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("debugFlag", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBook_argsTupleSchemeFactory());
    }

    public String bookTitle; // required
    public String genre; // required
    public long debugFlag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_TITLE((short)1, "bookTitle"),
      GENRE((short)2, "genre"),
      DEBUG_FLAG((short)3, "debugFlag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_TITLE
            return BOOK_TITLE;
          case 2: // GENRE
            return GENRE;
          case 3: // DEBUG_FLAG
            return DEBUG_FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEBUGFLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_TITLE, new org.apache.thrift.meta_data.FieldMetaData("bookTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENRE, new org.apache.thrift.meta_data.FieldMetaData("genre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEBUG_FLAG, new org.apache.thrift.meta_data.FieldMetaData("debugFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBook_args.class, metaDataMap);
    }

    public setBook_args() {
    }

    public setBook_args(
      String bookTitle,
      String genre,
      long debugFlag)
    {
      this();
      this.bookTitle = bookTitle;
      this.genre = genre;
      this.debugFlag = debugFlag;
      setDebugFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBook_args(setBook_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBookTitle()) {
        this.bookTitle = other.bookTitle;
      }
      if (other.isSetGenre()) {
        this.genre = other.genre;
      }
      this.debugFlag = other.debugFlag;
    }

    public setBook_args deepCopy() {
      return new setBook_args(this);
    }

    @Override
    public void clear() {
      this.bookTitle = null;
      this.genre = null;
      setDebugFlagIsSet(false);
      this.debugFlag = 0;
    }

    public String getBookTitle() {
      return this.bookTitle;
    }

    public setBook_args setBookTitle(String bookTitle) {
      this.bookTitle = bookTitle;
      return this;
    }

    public void unsetBookTitle() {
      this.bookTitle = null;
    }

    /** Returns true if field bookTitle is set (has been assigned a value) and false otherwise */
    public boolean isSetBookTitle() {
      return this.bookTitle != null;
    }

    public void setBookTitleIsSet(boolean value) {
      if (!value) {
        this.bookTitle = null;
      }
    }

    public String getGenre() {
      return this.genre;
    }

    public setBook_args setGenre(String genre) {
      this.genre = genre;
      return this;
    }

    public void unsetGenre() {
      this.genre = null;
    }

    /** Returns true if field genre is set (has been assigned a value) and false otherwise */
    public boolean isSetGenre() {
      return this.genre != null;
    }

    public void setGenreIsSet(boolean value) {
      if (!value) {
        this.genre = null;
      }
    }

    public long getDebugFlag() {
      return this.debugFlag;
    }

    public setBook_args setDebugFlag(long debugFlag) {
      this.debugFlag = debugFlag;
      setDebugFlagIsSet(true);
      return this;
    }

    public void unsetDebugFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBUGFLAG_ISSET_ID);
    }

    /** Returns true if field debugFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetDebugFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __DEBUGFLAG_ISSET_ID);
    }

    public void setDebugFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBUGFLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOK_TITLE:
        if (value == null) {
          unsetBookTitle();
        } else {
          setBookTitle((String)value);
        }
        break;

      case GENRE:
        if (value == null) {
          unsetGenre();
        } else {
          setGenre((String)value);
        }
        break;

      case DEBUG_FLAG:
        if (value == null) {
          unsetDebugFlag();
        } else {
          setDebugFlag((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_TITLE:
        return getBookTitle();

      case GENRE:
        return getGenre();

      case DEBUG_FLAG:
        return getDebugFlag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOK_TITLE:
        return isSetBookTitle();
      case GENRE:
        return isSetGenre();
      case DEBUG_FLAG:
        return isSetDebugFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBook_args)
        return this.equals((setBook_args)that);
      return false;
    }

    public boolean equals(setBook_args that) {
      if (that == null)
        return false;

      boolean this_present_bookTitle = true && this.isSetBookTitle();
      boolean that_present_bookTitle = true && that.isSetBookTitle();
      if (this_present_bookTitle || that_present_bookTitle) {
        if (!(this_present_bookTitle && that_present_bookTitle))
          return false;
        if (!this.bookTitle.equals(that.bookTitle))
          return false;
      }

      boolean this_present_genre = true && this.isSetGenre();
      boolean that_present_genre = true && that.isSetGenre();
      if (this_present_genre || that_present_genre) {
        if (!(this_present_genre && that_present_genre))
          return false;
        if (!this.genre.equals(that.genre))
          return false;
      }

      boolean this_present_debugFlag = true;
      boolean that_present_debugFlag = true;
      if (this_present_debugFlag || that_present_debugFlag) {
        if (!(this_present_debugFlag && that_present_debugFlag))
          return false;
        if (this.debugFlag != that.debugFlag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bookTitle = true && (isSetBookTitle());
      list.add(present_bookTitle);
      if (present_bookTitle)
        list.add(bookTitle);

      boolean present_genre = true && (isSetGenre());
      list.add(present_genre);
      if (present_genre)
        list.add(genre);

      boolean present_debugFlag = true;
      list.add(present_debugFlag);
      if (present_debugFlag)
        list.add(debugFlag);

      return list.hashCode();
    }

    @Override
    public int compareTo(setBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookTitle()).compareTo(other.isSetBookTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookTitle, other.bookTitle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenre()).compareTo(other.isSetGenre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genre, other.genre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDebugFlag()).compareTo(other.isSetDebugFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDebugFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugFlag, other.debugFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBook_args(");
      boolean first = true;

      sb.append("bookTitle:");
      if (this.bookTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.bookTitle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genre:");
      if (this.genre == null) {
        sb.append("null");
      } else {
        sb.append(this.genre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("debugFlag:");
      sb.append(this.debugFlag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBook_argsStandardSchemeFactory implements SchemeFactory {
      public setBook_argsStandardScheme getScheme() {
        return new setBook_argsStandardScheme();
      }
    }

    private static class setBook_argsStandardScheme extends StandardScheme<setBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookTitle = iprot.readString();
                struct.setBookTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GENRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.genre = iprot.readString();
                struct.setGenreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEBUG_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.debugFlag = iprot.readI64();
                struct.setDebugFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookTitle != null) {
          oprot.writeFieldBegin(BOOK_TITLE_FIELD_DESC);
          oprot.writeString(struct.bookTitle);
          oprot.writeFieldEnd();
        }
        if (struct.genre != null) {
          oprot.writeFieldBegin(GENRE_FIELD_DESC);
          oprot.writeString(struct.genre);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEBUG_FLAG_FIELD_DESC);
        oprot.writeI64(struct.debugFlag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBook_argsTupleSchemeFactory implements SchemeFactory {
      public setBook_argsTupleScheme getScheme() {
        return new setBook_argsTupleScheme();
      }
    }

    private static class setBook_argsTupleScheme extends TupleScheme<setBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookTitle()) {
          optionals.set(0);
        }
        if (struct.isSetGenre()) {
          optionals.set(1);
        }
        if (struct.isSetDebugFlag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookTitle()) {
          oprot.writeString(struct.bookTitle);
        }
        if (struct.isSetGenre()) {
          oprot.writeString(struct.genre);
        }
        if (struct.isSetDebugFlag()) {
          oprot.writeI64(struct.debugFlag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookTitle = iprot.readString();
          struct.setBookTitleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.genre = iprot.readString();
          struct.setGenreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.debugFlag = iprot.readI64();
          struct.setDebugFlagIsSet(true);
        }
      }
    }

  }

  public static class setBook_result implements org.apache.thrift.TBase<setBook_result, setBook_result._Fields>, java.io.Serializable, Cloneable, Comparable<setBook_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBook_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBook_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBook_result.class, metaDataMap);
    }

    public setBook_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBook_result(setBook_result other) {
    }

    public setBook_result deepCopy() {
      return new setBook_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBook_result)
        return this.equals((setBook_result)that);
      return false;
    }

    public boolean equals(setBook_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(setBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBook_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBook_resultStandardSchemeFactory implements SchemeFactory {
      public setBook_resultStandardScheme getScheme() {
        return new setBook_resultStandardScheme();
      }
    }

    private static class setBook_resultStandardScheme extends StandardScheme<setBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBook_resultTupleSchemeFactory implements SchemeFactory {
      public setBook_resultTupleScheme getScheme() {
        return new setBook_resultTupleScheme();
      }
    }

    private static class setBook_resultTupleScheme extends TupleScheme<setBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateFingerTable_args implements org.apache.thrift.TBase<updateFingerTable_args, updateFingerTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFingerTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFingerTable_args");

    private static final org.apache.thrift.protocol.TField NEW_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("newNode", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField I_FIELD_DESC = new org.apache.thrift.protocol.TField("i", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VISITED_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("visitedNodes", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFingerTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFingerTable_argsTupleSchemeFactory());
    }

    public DHTNode newNode; // required
    public int i; // required
    public List<DHTNode> visitedNodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_NODE((short)1, "newNode"),
      I((short)2, "i"),
      VISITED_NODES((short)3, "visitedNodes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_NODE
            return NEW_NODE;
          case 2: // I
            return I;
          case 3: // VISITED_NODES
            return VISITED_NODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __I_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_NODE, new org.apache.thrift.meta_data.FieldMetaData("newNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHTNode.class)));
      tmpMap.put(_Fields.I, new org.apache.thrift.meta_data.FieldMetaData("i", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VISITED_NODES, new org.apache.thrift.meta_data.FieldMetaData("visitedNodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHTNode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFingerTable_args.class, metaDataMap);
    }

    public updateFingerTable_args() {
    }

    public updateFingerTable_args(
      DHTNode newNode,
      int i,
      List<DHTNode> visitedNodes)
    {
      this();
      this.newNode = newNode;
      this.i = i;
      setIIsSet(true);
      this.visitedNodes = visitedNodes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFingerTable_args(updateFingerTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNewNode()) {
        this.newNode = new DHTNode(other.newNode);
      }
      this.i = other.i;
      if (other.isSetVisitedNodes()) {
        List<DHTNode> __this__visitedNodes = new ArrayList<DHTNode>(other.visitedNodes.size());
        for (DHTNode other_element : other.visitedNodes) {
          __this__visitedNodes.add(new DHTNode(other_element));
        }
        this.visitedNodes = __this__visitedNodes;
      }
    }

    public updateFingerTable_args deepCopy() {
      return new updateFingerTable_args(this);
    }

    @Override
    public void clear() {
      this.newNode = null;
      setIIsSet(false);
      this.i = 0;
      this.visitedNodes = null;
    }

    public DHTNode getNewNode() {
      return this.newNode;
    }

    public updateFingerTable_args setNewNode(DHTNode newNode) {
      this.newNode = newNode;
      return this;
    }

    public void unsetNewNode() {
      this.newNode = null;
    }

    /** Returns true if field newNode is set (has been assigned a value) and false otherwise */
    public boolean isSetNewNode() {
      return this.newNode != null;
    }

    public void setNewNodeIsSet(boolean value) {
      if (!value) {
        this.newNode = null;
      }
    }

    public int getI() {
      return this.i;
    }

    public updateFingerTable_args setI(int i) {
      this.i = i;
      setIIsSet(true);
      return this;
    }

    public void unsetI() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I_ISSET_ID);
    }

    /** Returns true if field i is set (has been assigned a value) and false otherwise */
    public boolean isSetI() {
      return EncodingUtils.testBit(__isset_bitfield, __I_ISSET_ID);
    }

    public void setIIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I_ISSET_ID, value);
    }

    public int getVisitedNodesSize() {
      return (this.visitedNodes == null) ? 0 : this.visitedNodes.size();
    }

    public java.util.Iterator<DHTNode> getVisitedNodesIterator() {
      return (this.visitedNodes == null) ? null : this.visitedNodes.iterator();
    }

    public void addToVisitedNodes(DHTNode elem) {
      if (this.visitedNodes == null) {
        this.visitedNodes = new ArrayList<DHTNode>();
      }
      this.visitedNodes.add(elem);
    }

    public List<DHTNode> getVisitedNodes() {
      return this.visitedNodes;
    }

    public updateFingerTable_args setVisitedNodes(List<DHTNode> visitedNodes) {
      this.visitedNodes = visitedNodes;
      return this;
    }

    public void unsetVisitedNodes() {
      this.visitedNodes = null;
    }

    /** Returns true if field visitedNodes is set (has been assigned a value) and false otherwise */
    public boolean isSetVisitedNodes() {
      return this.visitedNodes != null;
    }

    public void setVisitedNodesIsSet(boolean value) {
      if (!value) {
        this.visitedNodes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_NODE:
        if (value == null) {
          unsetNewNode();
        } else {
          setNewNode((DHTNode)value);
        }
        break;

      case I:
        if (value == null) {
          unsetI();
        } else {
          setI((Integer)value);
        }
        break;

      case VISITED_NODES:
        if (value == null) {
          unsetVisitedNodes();
        } else {
          setVisitedNodes((List<DHTNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_NODE:
        return getNewNode();

      case I:
        return getI();

      case VISITED_NODES:
        return getVisitedNodes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_NODE:
        return isSetNewNode();
      case I:
        return isSetI();
      case VISITED_NODES:
        return isSetVisitedNodes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFingerTable_args)
        return this.equals((updateFingerTable_args)that);
      return false;
    }

    public boolean equals(updateFingerTable_args that) {
      if (that == null)
        return false;

      boolean this_present_newNode = true && this.isSetNewNode();
      boolean that_present_newNode = true && that.isSetNewNode();
      if (this_present_newNode || that_present_newNode) {
        if (!(this_present_newNode && that_present_newNode))
          return false;
        if (!this.newNode.equals(that.newNode))
          return false;
      }

      boolean this_present_i = true;
      boolean that_present_i = true;
      if (this_present_i || that_present_i) {
        if (!(this_present_i && that_present_i))
          return false;
        if (this.i != that.i)
          return false;
      }

      boolean this_present_visitedNodes = true && this.isSetVisitedNodes();
      boolean that_present_visitedNodes = true && that.isSetVisitedNodes();
      if (this_present_visitedNodes || that_present_visitedNodes) {
        if (!(this_present_visitedNodes && that_present_visitedNodes))
          return false;
        if (!this.visitedNodes.equals(that.visitedNodes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_newNode = true && (isSetNewNode());
      list.add(present_newNode);
      if (present_newNode)
        list.add(newNode);

      boolean present_i = true;
      list.add(present_i);
      if (present_i)
        list.add(i);

      boolean present_visitedNodes = true && (isSetVisitedNodes());
      list.add(present_visitedNodes);
      if (present_visitedNodes)
        list.add(visitedNodes);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFingerTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewNode()).compareTo(other.isSetNewNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newNode, other.newNode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetI()).compareTo(other.isSetI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i, other.i);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisitedNodes()).compareTo(other.isSetVisitedNodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisitedNodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitedNodes, other.visitedNodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFingerTable_args(");
      boolean first = true;

      sb.append("newNode:");
      if (this.newNode == null) {
        sb.append("null");
      } else {
        sb.append(this.newNode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("i:");
      sb.append(this.i);
      first = false;
      if (!first) sb.append(", ");
      sb.append("visitedNodes:");
      if (this.visitedNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.visitedNodes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newNode != null) {
        newNode.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFingerTable_argsStandardSchemeFactory implements SchemeFactory {
      public updateFingerTable_argsStandardScheme getScheme() {
        return new updateFingerTable_argsStandardScheme();
      }
    }

    private static class updateFingerTable_argsStandardScheme extends StandardScheme<updateFingerTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFingerTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newNode = new DHTNode();
                struct.newNode.read(iprot);
                struct.setNewNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.i = iprot.readI32();
                struct.setIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISITED_NODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.visitedNodes = new ArrayList<DHTNode>(_list8.size);
                  DHTNode _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new DHTNode();
                    _elem9.read(iprot);
                    struct.visitedNodes.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setVisitedNodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFingerTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newNode != null) {
          oprot.writeFieldBegin(NEW_NODE_FIELD_DESC);
          struct.newNode.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(I_FIELD_DESC);
        oprot.writeI32(struct.i);
        oprot.writeFieldEnd();
        if (struct.visitedNodes != null) {
          oprot.writeFieldBegin(VISITED_NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.visitedNodes.size()));
            for (DHTNode _iter11 : struct.visitedNodes)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFingerTable_argsTupleSchemeFactory implements SchemeFactory {
      public updateFingerTable_argsTupleScheme getScheme() {
        return new updateFingerTable_argsTupleScheme();
      }
    }

    private static class updateFingerTable_argsTupleScheme extends TupleScheme<updateFingerTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFingerTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewNode()) {
          optionals.set(0);
        }
        if (struct.isSetI()) {
          optionals.set(1);
        }
        if (struct.isSetVisitedNodes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNewNode()) {
          struct.newNode.write(oprot);
        }
        if (struct.isSetI()) {
          oprot.writeI32(struct.i);
        }
        if (struct.isSetVisitedNodes()) {
          {
            oprot.writeI32(struct.visitedNodes.size());
            for (DHTNode _iter12 : struct.visitedNodes)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFingerTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.newNode = new DHTNode();
          struct.newNode.read(iprot);
          struct.setNewNodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.i = iprot.readI32();
          struct.setIIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.visitedNodes = new ArrayList<DHTNode>(_list13.size);
            DHTNode _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new DHTNode();
              _elem14.read(iprot);
              struct.visitedNodes.add(_elem14);
            }
          }
          struct.setVisitedNodesIsSet(true);
        }
      }
    }

  }

  public static class updateFingerTable_result implements org.apache.thrift.TBase<updateFingerTable_result, updateFingerTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFingerTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFingerTable_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFingerTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFingerTable_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFingerTable_result.class, metaDataMap);
    }

    public updateFingerTable_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFingerTable_result(updateFingerTable_result other) {
    }

    public updateFingerTable_result deepCopy() {
      return new updateFingerTable_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFingerTable_result)
        return this.equals((updateFingerTable_result)that);
      return false;
    }

    public boolean equals(updateFingerTable_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFingerTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFingerTable_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFingerTable_resultStandardSchemeFactory implements SchemeFactory {
      public updateFingerTable_resultStandardScheme getScheme() {
        return new updateFingerTable_resultStandardScheme();
      }
    }

    private static class updateFingerTable_resultStandardScheme extends StandardScheme<updateFingerTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFingerTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFingerTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFingerTable_resultTupleSchemeFactory implements SchemeFactory {
      public updateFingerTable_resultTupleScheme getScheme() {
        return new updateFingerTable_resultTupleScheme();
      }
    }

    private static class updateFingerTable_resultTupleScheme extends TupleScheme<updateFingerTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFingerTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFingerTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findSuccessor_args implements org.apache.thrift.TBase<findSuccessor_args, findSuccessor_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSuccessor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSuccessor_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField VISITED_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("visitedNodes", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSuccessor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSuccessor_argsTupleSchemeFactory());
    }

    public long key; // required
    public List<DHTNode> visitedNodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      VISITED_NODES((short)2, "visitedNodes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // VISITED_NODES
            return VISITED_NODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
      tmpMap.put(_Fields.VISITED_NODES, new org.apache.thrift.meta_data.FieldMetaData("visitedNodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHTNode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSuccessor_args.class, metaDataMap);
    }

    public findSuccessor_args() {
    }

    public findSuccessor_args(
      long key,
      List<DHTNode> visitedNodes)
    {
      this();
      this.key = key;
      setKeyIsSet(true);
      this.visitedNodes = visitedNodes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSuccessor_args(findSuccessor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.key = other.key;
      if (other.isSetVisitedNodes()) {
        List<DHTNode> __this__visitedNodes = new ArrayList<DHTNode>(other.visitedNodes.size());
        for (DHTNode other_element : other.visitedNodes) {
          __this__visitedNodes.add(new DHTNode(other_element));
        }
        this.visitedNodes = __this__visitedNodes;
      }
    }

    public findSuccessor_args deepCopy() {
      return new findSuccessor_args(this);
    }

    @Override
    public void clear() {
      setKeyIsSet(false);
      this.key = 0;
      this.visitedNodes = null;
    }

    public long getKey() {
      return this.key;
    }

    public findSuccessor_args setKey(long key) {
      this.key = key;
      setKeyIsSet(true);
      return this;
    }

    public void unsetKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    public void setKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
    }

    public int getVisitedNodesSize() {
      return (this.visitedNodes == null) ? 0 : this.visitedNodes.size();
    }

    public java.util.Iterator<DHTNode> getVisitedNodesIterator() {
      return (this.visitedNodes == null) ? null : this.visitedNodes.iterator();
    }

    public void addToVisitedNodes(DHTNode elem) {
      if (this.visitedNodes == null) {
        this.visitedNodes = new ArrayList<DHTNode>();
      }
      this.visitedNodes.add(elem);
    }

    public List<DHTNode> getVisitedNodes() {
      return this.visitedNodes;
    }

    public findSuccessor_args setVisitedNodes(List<DHTNode> visitedNodes) {
      this.visitedNodes = visitedNodes;
      return this;
    }

    public void unsetVisitedNodes() {
      this.visitedNodes = null;
    }

    /** Returns true if field visitedNodes is set (has been assigned a value) and false otherwise */
    public boolean isSetVisitedNodes() {
      return this.visitedNodes != null;
    }

    public void setVisitedNodesIsSet(boolean value) {
      if (!value) {
        this.visitedNodes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((Long)value);
        }
        break;

      case VISITED_NODES:
        if (value == null) {
          unsetVisitedNodes();
        } else {
          setVisitedNodes((List<DHTNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case VISITED_NODES:
        return getVisitedNodes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case VISITED_NODES:
        return isSetVisitedNodes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSuccessor_args)
        return this.equals((findSuccessor_args)that);
      return false;
    }

    public boolean equals(findSuccessor_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      boolean this_present_visitedNodes = true && this.isSetVisitedNodes();
      boolean that_present_visitedNodes = true && that.isSetVisitedNodes();
      if (this_present_visitedNodes || that_present_visitedNodes) {
        if (!(this_present_visitedNodes && that_present_visitedNodes))
          return false;
        if (!this.visitedNodes.equals(that.visitedNodes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true;
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_visitedNodes = true && (isSetVisitedNodes());
      list.add(present_visitedNodes);
      if (present_visitedNodes)
        list.add(visitedNodes);

      return list.hashCode();
    }

    @Override
    public int compareTo(findSuccessor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisitedNodes()).compareTo(other.isSetVisitedNodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisitedNodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitedNodes, other.visitedNodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSuccessor_args(");
      boolean first = true;

      sb.append("key:");
      sb.append(this.key);
      first = false;
      if (!first) sb.append(", ");
      sb.append("visitedNodes:");
      if (this.visitedNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.visitedNodes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSuccessor_argsStandardSchemeFactory implements SchemeFactory {
      public findSuccessor_argsStandardScheme getScheme() {
        return new findSuccessor_argsStandardScheme();
      }
    }

    private static class findSuccessor_argsStandardScheme extends StandardScheme<findSuccessor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSuccessor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.key = iprot.readI64();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISITED_NODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.visitedNodes = new ArrayList<DHTNode>(_list16.size);
                  DHTNode _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new DHTNode();
                    _elem17.read(iprot);
                    struct.visitedNodes.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setVisitedNodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSuccessor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeI64(struct.key);
        oprot.writeFieldEnd();
        if (struct.visitedNodes != null) {
          oprot.writeFieldBegin(VISITED_NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.visitedNodes.size()));
            for (DHTNode _iter19 : struct.visitedNodes)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSuccessor_argsTupleSchemeFactory implements SchemeFactory {
      public findSuccessor_argsTupleScheme getScheme() {
        return new findSuccessor_argsTupleScheme();
      }
    }

    private static class findSuccessor_argsTupleScheme extends TupleScheme<findSuccessor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSuccessor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetVisitedNodes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKey()) {
          oprot.writeI64(struct.key);
        }
        if (struct.isSetVisitedNodes()) {
          {
            oprot.writeI32(struct.visitedNodes.size());
            for (DHTNode _iter20 : struct.visitedNodes)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSuccessor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.key = iprot.readI64();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.visitedNodes = new ArrayList<DHTNode>(_list21.size);
            DHTNode _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new DHTNode();
              _elem22.read(iprot);
              struct.visitedNodes.add(_elem22);
            }
          }
          struct.setVisitedNodesIsSet(true);
        }
      }
    }

  }

  public static class findSuccessor_result implements org.apache.thrift.TBase<findSuccessor_result, findSuccessor_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSuccessor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSuccessor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSuccessor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSuccessor_resultTupleSchemeFactory());
    }

    public DHTNodePath success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHTNodePath.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSuccessor_result.class, metaDataMap);
    }

    public findSuccessor_result() {
    }

    public findSuccessor_result(
      DHTNodePath success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSuccessor_result(findSuccessor_result other) {
      if (other.isSetSuccess()) {
        this.success = new DHTNodePath(other.success);
      }
    }

    public findSuccessor_result deepCopy() {
      return new findSuccessor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DHTNodePath getSuccess() {
      return this.success;
    }

    public findSuccessor_result setSuccess(DHTNodePath success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DHTNodePath)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSuccessor_result)
        return this.equals((findSuccessor_result)that);
      return false;
    }

    public boolean equals(findSuccessor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findSuccessor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSuccessor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSuccessor_resultStandardSchemeFactory implements SchemeFactory {
      public findSuccessor_resultStandardScheme getScheme() {
        return new findSuccessor_resultStandardScheme();
      }
    }

    private static class findSuccessor_resultStandardScheme extends StandardScheme<findSuccessor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSuccessor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DHTNodePath();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSuccessor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSuccessor_resultTupleSchemeFactory implements SchemeFactory {
      public findSuccessor_resultTupleScheme getScheme() {
        return new findSuccessor_resultTupleScheme();
      }
    }

    private static class findSuccessor_resultTupleScheme extends TupleScheme<findSuccessor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSuccessor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSuccessor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DHTNodePath();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPredecessor_args implements org.apache.thrift.TBase<findPredecessor_args, findPredecessor_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPredecessor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPredecessor_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField VISITED_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("visitedNodes", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPredecessor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPredecessor_argsTupleSchemeFactory());
    }

    public long key; // required
    public List<DHTNode> visitedNodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      VISITED_NODES((short)2, "visitedNodes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // VISITED_NODES
            return VISITED_NODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
      tmpMap.put(_Fields.VISITED_NODES, new org.apache.thrift.meta_data.FieldMetaData("visitedNodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHTNode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPredecessor_args.class, metaDataMap);
    }

    public findPredecessor_args() {
    }

    public findPredecessor_args(
      long key,
      List<DHTNode> visitedNodes)
    {
      this();
      this.key = key;
      setKeyIsSet(true);
      this.visitedNodes = visitedNodes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPredecessor_args(findPredecessor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.key = other.key;
      if (other.isSetVisitedNodes()) {
        List<DHTNode> __this__visitedNodes = new ArrayList<DHTNode>(other.visitedNodes.size());
        for (DHTNode other_element : other.visitedNodes) {
          __this__visitedNodes.add(new DHTNode(other_element));
        }
        this.visitedNodes = __this__visitedNodes;
      }
    }

    public findPredecessor_args deepCopy() {
      return new findPredecessor_args(this);
    }

    @Override
    public void clear() {
      setKeyIsSet(false);
      this.key = 0;
      this.visitedNodes = null;
    }

    public long getKey() {
      return this.key;
    }

    public findPredecessor_args setKey(long key) {
      this.key = key;
      setKeyIsSet(true);
      return this;
    }

    public void unsetKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    public void setKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
    }

    public int getVisitedNodesSize() {
      return (this.visitedNodes == null) ? 0 : this.visitedNodes.size();
    }

    public java.util.Iterator<DHTNode> getVisitedNodesIterator() {
      return (this.visitedNodes == null) ? null : this.visitedNodes.iterator();
    }

    public void addToVisitedNodes(DHTNode elem) {
      if (this.visitedNodes == null) {
        this.visitedNodes = new ArrayList<DHTNode>();
      }
      this.visitedNodes.add(elem);
    }

    public List<DHTNode> getVisitedNodes() {
      return this.visitedNodes;
    }

    public findPredecessor_args setVisitedNodes(List<DHTNode> visitedNodes) {
      this.visitedNodes = visitedNodes;
      return this;
    }

    public void unsetVisitedNodes() {
      this.visitedNodes = null;
    }

    /** Returns true if field visitedNodes is set (has been assigned a value) and false otherwise */
    public boolean isSetVisitedNodes() {
      return this.visitedNodes != null;
    }

    public void setVisitedNodesIsSet(boolean value) {
      if (!value) {
        this.visitedNodes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((Long)value);
        }
        break;

      case VISITED_NODES:
        if (value == null) {
          unsetVisitedNodes();
        } else {
          setVisitedNodes((List<DHTNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case VISITED_NODES:
        return getVisitedNodes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case VISITED_NODES:
        return isSetVisitedNodes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPredecessor_args)
        return this.equals((findPredecessor_args)that);
      return false;
    }

    public boolean equals(findPredecessor_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      boolean this_present_visitedNodes = true && this.isSetVisitedNodes();
      boolean that_present_visitedNodes = true && that.isSetVisitedNodes();
      if (this_present_visitedNodes || that_present_visitedNodes) {
        if (!(this_present_visitedNodes && that_present_visitedNodes))
          return false;
        if (!this.visitedNodes.equals(that.visitedNodes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true;
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_visitedNodes = true && (isSetVisitedNodes());
      list.add(present_visitedNodes);
      if (present_visitedNodes)
        list.add(visitedNodes);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPredecessor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisitedNodes()).compareTo(other.isSetVisitedNodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisitedNodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitedNodes, other.visitedNodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPredecessor_args(");
      boolean first = true;

      sb.append("key:");
      sb.append(this.key);
      first = false;
      if (!first) sb.append(", ");
      sb.append("visitedNodes:");
      if (this.visitedNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.visitedNodes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPredecessor_argsStandardSchemeFactory implements SchemeFactory {
      public findPredecessor_argsStandardScheme getScheme() {
        return new findPredecessor_argsStandardScheme();
      }
    }

    private static class findPredecessor_argsStandardScheme extends StandardScheme<findPredecessor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPredecessor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.key = iprot.readI64();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISITED_NODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.visitedNodes = new ArrayList<DHTNode>(_list24.size);
                  DHTNode _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new DHTNode();
                    _elem25.read(iprot);
                    struct.visitedNodes.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setVisitedNodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPredecessor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeI64(struct.key);
        oprot.writeFieldEnd();
        if (struct.visitedNodes != null) {
          oprot.writeFieldBegin(VISITED_NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.visitedNodes.size()));
            for (DHTNode _iter27 : struct.visitedNodes)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPredecessor_argsTupleSchemeFactory implements SchemeFactory {
      public findPredecessor_argsTupleScheme getScheme() {
        return new findPredecessor_argsTupleScheme();
      }
    }

    private static class findPredecessor_argsTupleScheme extends TupleScheme<findPredecessor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPredecessor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetVisitedNodes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKey()) {
          oprot.writeI64(struct.key);
        }
        if (struct.isSetVisitedNodes()) {
          {
            oprot.writeI32(struct.visitedNodes.size());
            for (DHTNode _iter28 : struct.visitedNodes)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPredecessor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.key = iprot.readI64();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.visitedNodes = new ArrayList<DHTNode>(_list29.size);
            DHTNode _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new DHTNode();
              _elem30.read(iprot);
              struct.visitedNodes.add(_elem30);
            }
          }
          struct.setVisitedNodesIsSet(true);
        }
      }
    }

  }

  public static class findPredecessor_result implements org.apache.thrift.TBase<findPredecessor_result, findPredecessor_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPredecessor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPredecessor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPredecessor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPredecessor_resultTupleSchemeFactory());
    }

    public DHTNodePath success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHTNodePath.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPredecessor_result.class, metaDataMap);
    }

    public findPredecessor_result() {
    }

    public findPredecessor_result(
      DHTNodePath success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPredecessor_result(findPredecessor_result other) {
      if (other.isSetSuccess()) {
        this.success = new DHTNodePath(other.success);
      }
    }

    public findPredecessor_result deepCopy() {
      return new findPredecessor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DHTNodePath getSuccess() {
      return this.success;
    }

    public findPredecessor_result setSuccess(DHTNodePath success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DHTNodePath)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPredecessor_result)
        return this.equals((findPredecessor_result)that);
      return false;
    }

    public boolean equals(findPredecessor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPredecessor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPredecessor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPredecessor_resultStandardSchemeFactory implements SchemeFactory {
      public findPredecessor_resultStandardScheme getScheme() {
        return new findPredecessor_resultStandardScheme();
      }
    }

    private static class findPredecessor_resultStandardScheme extends StandardScheme<findPredecessor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPredecessor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DHTNodePath();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPredecessor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPredecessor_resultTupleSchemeFactory implements SchemeFactory {
      public findPredecessor_resultTupleScheme getScheme() {
        return new findPredecessor_resultTupleScheme();
      }
    }

    private static class findPredecessor_resultTupleScheme extends TupleScheme<findPredecessor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPredecessor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPredecessor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DHTNodePath();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPredecessor_args implements org.apache.thrift.TBase<setPredecessor_args, setPredecessor_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPredecessor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPredecessor_args");

    private static final org.apache.thrift.protocol.TField PREDECESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("predecessor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPredecessor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPredecessor_argsTupleSchemeFactory());
    }

    public DHTNode predecessor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREDECESSOR((short)1, "predecessor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREDECESSOR
            return PREDECESSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREDECESSOR, new org.apache.thrift.meta_data.FieldMetaData("predecessor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHTNode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPredecessor_args.class, metaDataMap);
    }

    public setPredecessor_args() {
    }

    public setPredecessor_args(
      DHTNode predecessor)
    {
      this();
      this.predecessor = predecessor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPredecessor_args(setPredecessor_args other) {
      if (other.isSetPredecessor()) {
        this.predecessor = new DHTNode(other.predecessor);
      }
    }

    public setPredecessor_args deepCopy() {
      return new setPredecessor_args(this);
    }

    @Override
    public void clear() {
      this.predecessor = null;
    }

    public DHTNode getPredecessor() {
      return this.predecessor;
    }

    public setPredecessor_args setPredecessor(DHTNode predecessor) {
      this.predecessor = predecessor;
      return this;
    }

    public void unsetPredecessor() {
      this.predecessor = null;
    }

    /** Returns true if field predecessor is set (has been assigned a value) and false otherwise */
    public boolean isSetPredecessor() {
      return this.predecessor != null;
    }

    public void setPredecessorIsSet(boolean value) {
      if (!value) {
        this.predecessor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREDECESSOR:
        if (value == null) {
          unsetPredecessor();
        } else {
          setPredecessor((DHTNode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREDECESSOR:
        return getPredecessor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREDECESSOR:
        return isSetPredecessor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPredecessor_args)
        return this.equals((setPredecessor_args)that);
      return false;
    }

    public boolean equals(setPredecessor_args that) {
      if (that == null)
        return false;

      boolean this_present_predecessor = true && this.isSetPredecessor();
      boolean that_present_predecessor = true && that.isSetPredecessor();
      if (this_present_predecessor || that_present_predecessor) {
        if (!(this_present_predecessor && that_present_predecessor))
          return false;
        if (!this.predecessor.equals(that.predecessor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_predecessor = true && (isSetPredecessor());
      list.add(present_predecessor);
      if (present_predecessor)
        list.add(predecessor);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPredecessor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPredecessor()).compareTo(other.isSetPredecessor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPredecessor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predecessor, other.predecessor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPredecessor_args(");
      boolean first = true;

      sb.append("predecessor:");
      if (this.predecessor == null) {
        sb.append("null");
      } else {
        sb.append(this.predecessor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (predecessor != null) {
        predecessor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPredecessor_argsStandardSchemeFactory implements SchemeFactory {
      public setPredecessor_argsStandardScheme getScheme() {
        return new setPredecessor_argsStandardScheme();
      }
    }

    private static class setPredecessor_argsStandardScheme extends StandardScheme<setPredecessor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPredecessor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREDECESSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.predecessor = new DHTNode();
                struct.predecessor.read(iprot);
                struct.setPredecessorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPredecessor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.predecessor != null) {
          oprot.writeFieldBegin(PREDECESSOR_FIELD_DESC);
          struct.predecessor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPredecessor_argsTupleSchemeFactory implements SchemeFactory {
      public setPredecessor_argsTupleScheme getScheme() {
        return new setPredecessor_argsTupleScheme();
      }
    }

    private static class setPredecessor_argsTupleScheme extends TupleScheme<setPredecessor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPredecessor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPredecessor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPredecessor()) {
          struct.predecessor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPredecessor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.predecessor = new DHTNode();
          struct.predecessor.read(iprot);
          struct.setPredecessorIsSet(true);
        }
      }
    }

  }

  public static class setPredecessor_result implements org.apache.thrift.TBase<setPredecessor_result, setPredecessor_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPredecessor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPredecessor_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPredecessor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPredecessor_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPredecessor_result.class, metaDataMap);
    }

    public setPredecessor_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPredecessor_result(setPredecessor_result other) {
    }

    public setPredecessor_result deepCopy() {
      return new setPredecessor_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPredecessor_result)
        return this.equals((setPredecessor_result)that);
      return false;
    }

    public boolean equals(setPredecessor_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(setPredecessor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPredecessor_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPredecessor_resultStandardSchemeFactory implements SchemeFactory {
      public setPredecessor_resultStandardScheme getScheme() {
        return new setPredecessor_resultStandardScheme();
      }
    }

    private static class setPredecessor_resultStandardScheme extends StandardScheme<setPredecessor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPredecessor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPredecessor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPredecessor_resultTupleSchemeFactory implements SchemeFactory {
      public setPredecessor_resultTupleScheme getScheme() {
        return new setPredecessor_resultTupleScheme();
      }
    }

    private static class setPredecessor_resultTupleScheme extends TupleScheme<setPredecessor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPredecessor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPredecessor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class transferKeys_args implements org.apache.thrift.TBase<transferKeys_args, transferKeys_args._Fields>, java.io.Serializable, Cloneable, Comparable<transferKeys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferKeys_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferKeys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferKeys_argsTupleSchemeFactory());
    }

    public long key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferKeys_args.class, metaDataMap);
    }

    public transferKeys_args() {
    }

    public transferKeys_args(
      long key)
    {
      this();
      this.key = key;
      setKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferKeys_args(transferKeys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.key = other.key;
    }

    public transferKeys_args deepCopy() {
      return new transferKeys_args(this);
    }

    @Override
    public void clear() {
      setKeyIsSet(false);
      this.key = 0;
    }

    public long getKey() {
      return this.key;
    }

    public transferKeys_args setKey(long key) {
      this.key = key;
      setKeyIsSet(true);
      return this;
    }

    public void unsetKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    public void setKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferKeys_args)
        return this.equals((transferKeys_args)that);
      return false;
    }

    public boolean equals(transferKeys_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true;
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(transferKeys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferKeys_args(");
      boolean first = true;

      sb.append("key:");
      sb.append(this.key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferKeys_argsStandardSchemeFactory implements SchemeFactory {
      public transferKeys_argsStandardScheme getScheme() {
        return new transferKeys_argsStandardScheme();
      }
    }

    private static class transferKeys_argsStandardScheme extends StandardScheme<transferKeys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferKeys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.key = iprot.readI64();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferKeys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeI64(struct.key);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferKeys_argsTupleSchemeFactory implements SchemeFactory {
      public transferKeys_argsTupleScheme getScheme() {
        return new transferKeys_argsTupleScheme();
      }
    }

    private static class transferKeys_argsTupleScheme extends TupleScheme<transferKeys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeI64(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readI64();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class transferKeys_result implements org.apache.thrift.TBase<transferKeys_result, transferKeys_result._Fields>, java.io.Serializable, Cloneable, Comparable<transferKeys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferKeys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferKeys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferKeys_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferKeys_result.class, metaDataMap);
    }

    public transferKeys_result() {
    }

    public transferKeys_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferKeys_result(transferKeys_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public transferKeys_result deepCopy() {
      return new transferKeys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public transferKeys_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferKeys_result)
        return this.equals((transferKeys_result)that);
      return false;
    }

    public boolean equals(transferKeys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(transferKeys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferKeys_resultStandardSchemeFactory implements SchemeFactory {
      public transferKeys_resultStandardScheme getScheme() {
        return new transferKeys_resultStandardScheme();
      }
    }

    private static class transferKeys_resultStandardScheme extends StandardScheme<transferKeys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferKeys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map32.size);
                  String _key33;
                  String _val34;
                  for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                  {
                    _key33 = iprot.readString();
                    _val34 = iprot.readString();
                    struct.success.put(_key33, _val34);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferKeys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter36 : struct.success.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              oprot.writeString(_iter36.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferKeys_resultTupleSchemeFactory implements SchemeFactory {
      public transferKeys_resultTupleScheme getScheme() {
        return new transferKeys_resultTupleScheme();
      }
    }

    private static class transferKeys_resultTupleScheme extends TupleScheme<transferKeys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter37 : struct.success.entrySet())
            {
              oprot.writeString(_iter37.getKey());
              oprot.writeString(_iter37.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map38.size);
            String _key39;
            String _val40;
            for (int _i41 = 0; _i41 < _map38.size; ++_i41)
            {
              _key39 = iprot.readString();
              _val40 = iprot.readString();
              struct.success.put(_key39, _val40);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
